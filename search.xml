<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>可是在现实日常中追求「故事感」才不是过错。</title>
      <link href="/2025/08/11/nichijou_story/"/>
      <url>/2025/08/11/nichijou_story/</url>
      
        <content type="html"><![CDATA[<p>因为一直与某个朋友存在这方面的争执——确切地说是那家伙总是嘲笑我“你好天真”“别幻想了”云云（可恶）——我忍不住想要为自己辩护。</p><p>现在的我，姑且还毫无退让地认定我的正确。</p><p>不过，客观来讲，曾经坚信的事物，被我亲自彻底否认掉之类的事情，也是的的确确存在过的。</p><p>未至的某一天，我是否会将如今这样的想法划为「幼稚」，也未可知；虽然，迄今我仍然不想放弃。</p><p>为此，把零零碎碎一些想法记录下来。</p><hr><p>暂置。</p>]]></content>
      
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有关Sys、初心者的奇妙之旅。</title>
      <link href="/2025/07/31/get_into_sys/"/>
      <url>/2025/07/31/get_into_sys/</url>
      
        <content type="html"><![CDATA[<p>这篇记录的语境接续<a href="/2025/07/30/end_of_1st_year_in_uni/" title="为我的大学一年级写下&#39;\0&#39;。">此前的一篇文章</a>，因为内容比较多，且相对独立，所以特拆开放在这里。</p><hr><p>……</p><p>再说回Coding吧。</p><p>我喜欢计算机，喜欢写代码，我想至少到现在，都是很纯粹的喜欢。很大一部分原因，是我喜欢创作。我不想用「创造」这个字眼，它听起来毕竟还是和「创作」不太一样。大概是因为，创作带着一些情感色彩吧。</p><p>不过在相当一段时间里，我还处于比较困惑的状态。因为很喜欢游戏，所以我在初中的时候有自己学过一点点C（完全是因为听说「想学编程就必须先学C语言」之类的说法去学的），C#（因为后来了解到Unity可以使用C#）和Unity，做过一点简单的游戏，尝试搭建过一个blog（很早就废弃了），所以呢，大一最初我仍然继续使用着C#。国庆的时候，我基于WPF写了一个三千行代码左右的音乐播放器，当时还是有点开心的。</p><p>可是我并不大清楚，我究竟学到了些什么。</p><p>当时的我呢，对计算机的领域并没有什么清晰的认知，基本上只知道Web，GUI，游戏这种其实并不能并列的分类。并且有逐渐意识到，再这样下去也仅仅是记下更多的API如何使用而已，而并没有真正理解背后的原理；此外，这样的知识几乎不具备可迁移性，它们对我的帮助是线性甚至更低阶的，我不应该花费太多时间才对。</p><p>我尝试学习一些类似「道」的东西，比如我感觉我的代码非常混乱，所以有在学习MVVM。可是，我很快感觉这仍然不是我想要的。当时的我莫名地认为，这东西太虚，太软；我该学习算法吗？我有在LeetCode写过一些算法题，但是我还是固执地认为，这和我想象的计算机不一样。</p><p>这是个有点偏颇的观点。CS本来就是个比较庞大的领域，没有人能否认算法不包含在内。不过，这确实使我走向了一个我认为正确的方向：Systems Programming。</p><p>于是我开始学习计算机底层。</p><p>最开始，我以为底层就是OS。所以我找到了OSTEP，开始阅读。</p><p>于是不出所料地失败了。毕竟我之前一直在C#的环境开发，对内存、线程之类的东西的了解太肤浅了。</p><p>然后因为看到周边人有的在玩计算机网络，所以我也想试试。这次我吸取了点教训，并没有从头就读Top-Down这种大部头，而是先读了比较轻松的《网络是怎样连接的》。可惜的是，也没什么进展的样子，除了让我对网络有了一个大概的、比较肤浅的认知。</p><p>至此，我仍然没有发现我希望追求的东西。啊，所谓的底层的、不变的事物，究竟是什么样的呢。这样的困惑时常会有。</p><p>然后出于对Linux的好奇，我开始阅读TLPI，这也就是转机。</p><p>TLPI是一本很棒的书。它依托于Linux，比较系统地介绍了操作系统的各个方面。我在十五天内快速通读了上册，跟着做了一些章节后的习题，获得了对系统级编程的初步认知。</p><p>我慢慢开始喜欢C语言了。它虽然很原始，但是简洁、直接，几乎每一步我都能清晰地知道我在做什么；而更高级的语言往往隐藏了很多细节，我不太喜欢对感知的缺失。这是优点还是缺点呢？我不清楚。</p><p>但是，当我草草读罢上册，我很快就收手了。我意识到，我大概具备了一些基本的知识，而TLPI更多关注的是OS API&#x2F;ABI的应用层，而非底层原理，且很多都聚焦在Linux的特殊性质上，这仍然不具备普适性。该拐弯了，我对自己说。</p><p>某天，我回想起了社团（啊对了，我加入了学校的开源技术协会）里的一位前辈推荐的一本书：CSAPP。稍作查询，我发现这大概正是我接下来需要的东西，所以我开始阅读。阅读的过程很痛苦，这实在不是一本轻松的读物，信息密度相当高，很多概念对我而言必须反复琢磨才能理解。</p><p>第一次阅读，我主要学习了X64汇编，对内存、编译流程、缓存具备了基本认知。其实我大概也就认真读了对应这些内容的几章，别的并没有涉足。当然，这样的收获我已经很满足了。</p><p>由于CSAPP的第七章（关于链接）比较晦涩，所以我选择了另一本书，《程序员的自我修养》。这本书虽然比较古旧，但是内容其实至今仍然比较适用。我很快在一周内就读完了我需要的东西（基本上，舍去了Windows相关的内容，对动态链接的阅读相对粗略），然后写了一个相当简单的C运行时。亲自进行系统调用的感觉让我很开心哦。</p><p>话说回来，这样四处看看，其实不太符合我的期望，我预期的是一个比较系统的认知。某个时刻，我意识到我仍然缺乏一些各个领域都需求的基础知识。我需要建立某种整体感知。</p><p>System的核心离不开OS，所以，我决定重新挑战OSTEP了！这时候到了寒假。</p><p>有个小插曲。此前我发现了一本很酷的书，Nand2Tetris。从基本的布尔代数开始，基于最基本的与非门，一步步构建出一个计算机系统，最后实现一个简单的操作系统。所以在寒假的最初三天，我完成了本书的前半部分，也就是硬件相关的内容；构建了一台相当原始的计算机，并配备了一个汇编器。虽然是相当玩具的级别，不过也很有趣。</p><p>然后我开始阅读OSTEP，同时开始学习MIT6.S081的课程。这次的切入相对顺利不少。不过，在我完成了前一半的实验以后，我再次遇到了困难。我发现，我对硬件的知识太匮乏了，以至于相关的代码几乎完全无法理解。</p><p>所以我再次终止了低效率的深入。在此之前，我已经了解了一些内存管理、进程调度的基本原理。我决定暂时放下OS。</p><p>然后，我转向一门新的语言：Rust。这实在是一门相当漂亮的语言，我一下就对它爱不释手了。寒假剩下的日子里，我阅读了The Book和Progamming Rust。接着，一直延续到开学开头一个星期，我阅读了Crafting Interpreters的前半部分，最后，使用Rust实现了一个简单的遍历AST的解释器：Rlox。</p><p>然后我就对编译器产生了不小的兴趣。我找来了Engineering a Compiler，只是稍微读了一些，我就发现我暂时不具备阅读的能力，所以搁置了。</p><p>接下来的事情就没太多波折了，因为基本上我已经明确了暂时的方向。</p><p>首先，我编写了Chip-8的一个模拟器。然后，参考8080 Programmers Manual以及一些其余信息，编写了一个Intel 8080微处理器的模拟器。这样，我对代码背后发生的事情有了相对充足的理解。</p><p>接着，我阅读了An Introduction to Assembly Programming with RISC-V。由于此前6.S081的经验以及对RISC架构的兴趣，我决定首先学习RISC-V。这本书很轻松，收获也挺大的。</p><p>然后，我决定自己开始使用Rust编写一个简单操作系统了。似乎跨度非常大，但是我认为我的理论储备已经足够了，如果再仅仅阅读下去，收益大概会逐步递减。</p><p>我主要依托于这些资料：</p><ul><li>OSTEP</li><li>xv6</li><li>清华的RCore</li><li>PopOS (Writing an OS in Rust - Philipp Oppermann’s blog)</li><li>Stephen Marz的OS Blog</li><li>RISC-V关于Privileged Architecture的文档</li></ul><p>大概过了两个月，CafOS（<del>Caf？Kaf！……</del>）的开发就完毕了。这是一个运行在RISC-V单核处理器上的简单类Unix操作系统，支持简单的轮转调度，多级页表，用户态和内核态的切换，一个基本的文件系统。内核使用Rust，用户态的shell等程序使用C。总计大概13k行代码。我想一定产生了很多的冗余，因为其实这个内核的功能还是相当简单啦。</p><p>虽然是第一次编写，但是我很满足。因为我终于有了一个比较完整的系统级编程的认知。</p><p>接着其实就没什么特别重要的事情了。广泛阅读了一些书籍，并回过头补充越读了一些我之前没能理解的事物。值得一提的是，我阅读了DDCA。对硬件开发有了一点基本的认知，使用SystemVerilog编写了简单的RV32I单周期处理器和五级流水线处理器。</p><p>然后，我想，我还差最后一片拼图了。OS，CPU，我还差什么？答案很清晰了：Compiler。</p><p>这次我再次做了一些理论补充。我主要使用了三本书：</p><ul><li>Engineering a Compiler    主要参考资料，类似百科的地位</li><li>Writing a C Compiler  给出了比较清晰的伪代码和一些设计思路</li><li>Practical Compiler Construction  分析了一个简单C编译器的源代码，给出了一些思路和启示</li></ul><p>然后大概三周时间，我编写了一个简单的、无依赖的C编译器，drcc。仅仅支持相当小的C子集。也尝试做了一些优化。它遵循这样的流程：Source Code -&gt; AST -&gt; HIR (AST with semantic information) -&gt; MIR (Three-Address Code) -&gt; LIR (Concrete RISC-V assembly with virtual registers) -&gt; ASM (Valid RISC-V assembly code)。</p><p>至此，第一年的学习基本上告一段落。写了这么多，我还是很喜欢系统编程。我感觉我现在才算刚刚入门，很多此前完全不了解的东西，现在才稍微有了一点点能力深入。</p><p>期待之后的旅程啦。</p>]]></content>
      
      
      
        <tags>
            
            <tag> coding, sys </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为我的大学一年级写下&#39;&#92;0&#39;。</title>
      <link href="/2025/07/30/end_of_1st_year_in_uni/"/>
      <url>/2025/07/30/end_of_1st_year_in_uni/</url>
      
        <content type="html"><![CDATA[<p>大概是几个眨眼的功夫，在大学的第一年就这样结束了。或许因为没有什么波澜，所以在这期间我并没有深刻地感到时间的流逝。直到现在希望写下这些文字，才有点恍惚的感觉。</p><p>——写出像这样的俗套开头真抱歉。但是，这就是我的真实感受。</p><hr><p>曾经的某段时间里，我对大学生活有过很多期待和幻想：与各种各样的人交往，学会很多很多有意思的事情，变成更成熟的自己……我是个比较内敛的人;索性说成我的社交能力比较差劲也行。所以之前我会有想，进入了大学，我肯定会以某种方式神奇地变得开朗起来，会交很多朋友，随便一叫总会有人和我一起去吃饭、散步、看风景。我有过这样的想法。</p><p>只是一年过去，我的社交其实并没有发生什么变化。并没有如我所愿地遇上知心之交；干脆点说，就算是比较熟悉、可以相对放心聊聊天的朋友也没有。起初我并不期望共同话题，不过甚至这样的东西都已经变成奢求了的样子。我呢，大概也就是每天上课、吃饭、回宿舍，偶尔和同学聊聊天，或者在网上和朋友们说说话。基本就是这样。</p><p>说到底也和我是个比较奇怪的人有关系。毕竟，在开学的自我介绍里自称「有时会说奇怪的话」的家伙老实说确实是有点令人费解的，当然也包括我——啊，我究竟是在什么样的心态里说出这种话的呢。而且，正是因为担心会发生很尴尬的情况，所以事先在手机的记事本上写下了大概要说的东西，当然也包括上面那句话。也就是说，这样的话竟然是我事先「计划」好的，并非随口一说。坦白说我也没办法理解。</p><p>毕竟我的的确确就是那种偶尔连自己下一秒要说什么都预测困难的家伙。嗯……</p><p>话说回来，我倒也没有因为这件事感到多么沮丧。毕竟我也没有多么期待会有朋友出现。只是，偶尔会有点遗憾罢了。此外，如果把一切时间都留给自己，倒也不赖的样子。那样，就会有很多时间来做自己喜欢的事情了。</p><p>不，不对，果然，还是不止一点点遗憾的吧。</p><p>不管怎么说，事已至此。那么，我喜欢什么呢。有过数次的、偶然的思考，但是要理清楚写下来，似乎真的有点棘手呢。</p><p>换句话说，我好像没有什么特别喜欢的东西。除了两点我比较能明确的。Music &amp; Coding.</p><p>想到这里，都有点想狠狠教训自己一顿了。明明大一前的暑假买了电吉他，说好要好好练习的，结果却因为各种各样的原因——当然主要是懒惰——没有好好学习，现在和没入门的级别几乎没有任何区别。</p><p>啊可是电吉他真的好难啊。T_T</p><p>不过像我这种半途而废的家伙也完全没资格抱怨吧。T_T</p><p>倒也没听什么新歌，已经不像之前那样，喜欢的歌手发了一首新歌或者一张专辑，哪怕是凌晨一两点，也会认真听完了。我呢，还是在听着不少老歌啊。</p><p>不过，也很合理。曾经很艰难的时候，是很喜欢的一些歌拯救了我。所以，那些老歌对我而言不仅仅意味着歌曲本身了，还有很多很多的回忆，是我人生的一些见证。所以，听到的时候，会忍不住地想起很多事情。</p><p>比如高二里某个夏夜，躺在凉席上看着窗外的街灯。那时候我在听着花譜的「拔刀」。</p><p>比如某个稀松平常的晚上十一点，我暂时抛开了作业本，无意识地在书桌上刻着一些串不起来的歌词，有时因为假名写不出来所以留下空白。那时候我在听ヨルシカ的「花人局」。</p><p>比如某天下晚自习回家路上，我低声不流畅地哼着喜欢的歌，结果被一个同学撞见，于是我立即装作没看见，相当尴尬又有点激动（欸，为什么……？）快步走开了……唱的是Zutomayo的「秒針を噛む」。那首歌，嗯，真是太难了，所以我几乎只是在不断重复一些熟悉的几句歌词啦。</p><p>有很多这样的时光，所以我还是有点幸福呢。</p><p>今年印象特别深刻的歌也没有几首，倒是有一首变成了相当喜欢的歌。也就是花譜的「痛みを」。此前，也有经常听，但是并没有特别的深刻感受？通关了「神椿市建設中。REGENERATE」后，我变得非常喜欢这首歌了。本来就很有感染力，加上感人的（<del>粉丝滤镜</del>）剧情加持，几乎要变成我最喜欢的歌了哦。</p><p><del>我永远喜欢花譜小姐！</del></p><p>Coding的话呢，因为想说的东西比较多，所以就放在<a href="/2025/07/31/get_into_sys/" title="有关Sys、初心者的奇妙之旅。">另一篇post</a>里。</p><p>然后，记录一些生活的小碎片吧。</p><ul><li>加入了学校的开源技术协会。感觉很酷，但是在参加了第一次小聚后立即遭到了巨大的打击——所以说大家在说的东西为什么我一点都不懂！……几乎是折磨般度过了这次灾难，然后除了听了某一位前辈讲了一次关于C语言的东西，就再也没有去过了。呜呜呜。</li><li>应学生会邀请（竟然是！）给一些同学们作了一次线性代数模拟考试的讲座。第一次做这种事，所以要装出游刃有余的样子，结果还是有点紧张，不过大体还不赖嘛。</li><li>观看了「86 - 不存在的战区」。很喜欢的故事。少校和辛见面的那段我反复观摩了很多遍。听说续集的制作已经决定了，期待一下吧。</li><li>「神椿市协奏中。」的技术很有长进喔。居然在一些歌曲的排行榜上挤进了前十。而且有一次，因为是刚出的歌，居然拿到了全球第二！（其实是根本没什么人玩这游戏而且还是新出的DLC歌曲的第一天的缘故啦……）本来想着一定要再接再厉拿下第一，然后就能发个动态炫耀一下。排名第一的那家伙叫做「神椿市三番街之神」，内容我都想好了，就是「现在谁才是三番街之神？」。结果刷了很久却根本突破不了，最后放弃了……结果第二天就被一大群人超过了，现在已经早被甩出前十了。T_T</li><li>通关了「神椿市建設中。REGENERATE」。本来对神椿的技术力和诚意不抱希望的，而且这个游戏竟敢售价一百三，实在是让我有点无言。结果玩下来发现确实很不赖的样子。虽然战斗系统非常讨厌。嗯。剧情方面除了五位同盟者的转变相当突兀和令人费解之外，还是挺让我感动的。三周目打通真结局之后，回到现实，我很是怅然了一阵子呢。</li><li>很激动地等待着建设中的动漫。看了三集后发现完全没办法坚持看下去。所以说编剧知道他究竟在创作些什么东西吗？明明我事先玩过游戏，为什么还是不少地方都也看不懂呢。有思考让AI替代这些饭桶的可能性。</li><li>再次通关了一遍空洞骑士。我果然还是最喜欢这类类银河恶魔城游戏。另外，总是忍不住思考，当初的圣巢究竟会有多么繁荣呢？只能看见一地破败光景，有点失落。想玩丝之歌。</li><li>入坑了战地一。一直对这类军事游戏很感兴趣，上手之后发现果然不太简单，但是很有意思。喜欢玩侦察兵和突击兵。</li></ul><p>大概我的一年也就是这些？但是，我还有很多想做的呢。总是感觉时间不够。往后一年，嗯，首先想学会唱歌。</p><p>不管怎么说，大学一年级就这样结束了。</p><p>多变的、茫然的、平凡的过去一年，要说再见了。不可解的、尚未观测的未来，正在等待着我。</p><hr><p>然后，用一句话结束吧：</p><p>過去を喰らって、海に化ける。そして、花になる。</p><p>吞噬过去，化身为海。然后，成为花。</p><p>——  Quoted from Kaf’s Music</p>]]></content>
      
      
      
        <tags>
            
            <tag> life </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
